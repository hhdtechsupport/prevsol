<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

 /**
 * Implements hook_preprocess_html().
 */
function prevsol_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function prevsol_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
* Implements hook_preprocess_page().
*/
function prevsol_preprocess_page(&$variables) {
  $block_upcoming_events = \Drupal\block\Entity\Block::load('views_block__upcoming_events_block_2');
  $variables['page']['block_upcoming_events'] = \Drupal::entityManager()->getViewBuilder('block')->view($block_upcoming_events);

  $block_who_we_are = \Drupal\block\Entity\Block::load('whowearefront');
  $variables['page']['block_who_we_are'] = \Drupal::entityManager()->getViewBuilder('block')->view($block_who_we_are);

  $block_quotes = \Drupal\block\Entity\Block::load('quotesfront');
  $variables['page']['block_quotes'] = \Drupal::entityManager()->getViewBuilder('block')->view($block_quotes);
  //kint($variables);

   $block_quotes_views = \Drupal\block\Entity\Block::load('views_block__quotes_block_2');
   $variables['page']['block_quotes_views'] = \Drupal::entityManager()->getViewBuilder('block')->view($block_quotes_views);
}

/**
 * Implements hook_preprocess_HOOK() for views-view-field.html.twig.
 */
function prevsol_preprocess_views_view_field(&$variables) {
  //date_default_timezone_set('EDT');

  $view = $variables['view'];
  $field = $variables['field'];

  if ($view->id() == 'upcoming_events') {
    if ($field->field == 'field_when') {
      // Replace characters in the field output.
      $array = explode('#', $variables['output']);
      // $variables['output'] = Drupal\Core\Render\Markup::create();
      $date1 = new DateTime($array[0]);
      $date2 = new DateTime($array[1]);
      if ($date1->format('T') == 'EST') {
        $date1 = $date1->sub(new DateInterval('PT5H'));
      } else {
        $date1 = $date1->sub(new DateInterval('PT4H'));
      }
      if ($date2->format('T') == 'EST') {
        $date2 = $date2->sub(new DateInterval('PT5H'));
      } else {
        $date2 = $date2->sub(new DateInterval('PT4H'));
      }



      $month1 = $date1->format('m');
      $month2 = $date2->format('m');
      $day1 = $date1->format('j');
      $day2 = $date2->format('j');


      if ($date2) {
        if ($month1 == $month2) {
          if ($day1 == $day2) {
            $output = $date1->format('F j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
          } else {
            $output = $date1->format('F j') . "-" . $date2->format('j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
          }
        } else {
          $output = $date1->format('F j') . "-" . $date2->format('F j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
        }
        
      } else {
        $output = $date1->format('F j, Y') . " | " . $date1->format('g:ia') . " " . $date1->format('T');
      }
      $variables['output'] = Drupal\Core\Render\Markup::create($output);
    }
  }
}

/**
* Implements hook_preprocess_field().
*/
function prevsol_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  if ($field_name == 'field_when') {
    //kint($variables['items'][0]['content']);
    //kint($variables['items'][0]['content']['start_date']['#text']);
    //kint($variables['items'][0]['content']['end_date']['#text']);

    //$date1 = new DateTime(strtotime($variables['items'][0]['content']['start_date']['#text']));
    //$date2 = new DateTime(strtotime($variables['items'][0]['content']['end_date']['#text']));
    $date1 = DateTime::createFromFormat('D, n/j/Y - h:i A T', $variables['items'][0]['content']['start_date']['#text']);
    $date2 = DateTime::createFromFormat('D, n/j/Y - h:i A T', $variables['items'][0]['content']['end_date']['#text']);
    //$date1 = $date1->sub(new DateInterval('PT1H'));
    //$date2 = $date2->sub(new DateInterval('PT1H'));

    $month1 = $date1->format('m');
    $month2 = $date2->format('m');
    $day1 = $date1->format('j');
    $day2 = $date2->format('j');


    if ($date2) {
      if ($month1 == $month2) {
        if ($day1 == $day2) {
          $output = $date1->format('F j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
        } else {
          $output = $date1->format('F j') . "-" . $date2->format('j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
        }
      } else {
        $output = $date1->format('F j') . "-" . $date2->format('F j, Y') . " | " . $date1->format('g:ia') . "-" . $date2->format('g:ia') . " " . $date2->format('T');
      }
      
    } else {
      $output = $date1->format('F j, Y') . " | " . $date1->format('g:ia') . " " . $date1->format('T');
    }
    $variables['items'][0]['content'] = Drupal\Core\Render\Markup::create($output);
  }
}
